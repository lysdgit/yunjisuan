linux/ubuntu 更新系统时间
1.安装ntpdate

sudo apt install ntpdate

2.删除etc/localtime文件，并复制shanghai时区文件替换到这里。

rm -rf /etc/localtime


cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime




3.然后ntpdate -u ntp.api.bz更新下时间。



4.查看时间，时间已经同步过来了，为了避免重启后丢失这些修改，进行保存：

hwclock -w


二、添加 OpenStack 软件包及基本环境
1、启用 ubuntu 对应版本 openstack 存档
此处描述的存档启用需要在运行 OpenStack 服务的所有节点上完成。
适用于 Ubuntu 20.04 LTS 的 OpenStack Victoria：
add-apt-repository cloud-archive:victoria

2、SQL 数据库
大多数 OpenStack 服务使用 SQL 数据库来存储信息。数据库通常在控制器节点
上运行。本指南中的过程根据发行版使用 MariaDB 或 MySQL。OpenStack 服务还支
持其他 SQL 数据库，包括 PostgreSQL。
1. 安装和配置组件
安装软件包：
从 Ubuntu 20.04 开始，安装软件包：
apt install mariadb-server python3-pymysql
创建和编辑/etc/mysql/mariadb.conf.d/99-openstack.cnf 文件并完成以下操
作：
vim /etc/mysql/mariadb.conf.d/99-openstack.cnf
创建一个[mysqld]section，设置 bind-address key 为 controller 节点的管理
IP 地址，允许其他节点通过管理网络访问。设置附加键以启用有用的选项和 UTF-8
字符集：
[mysqld]
bind-address = 192.168.100.10
default-storage-engine = innodb
innodb_file_per_table = on
max_connections = 4096
collation-server = utf8_general_ci
character-set-server = utf8
完成安装
重启数据库服务：
service mysql restart
通过运行 mysql_secure_installation 脚本来保护数据库服务。特别是，为数
据库 root 帐户选择一个合适的密码 ：（设置数据库密码为 000000）
mysql_secure_installation

3、rabbit 消息队列
OpenStack 使用消息队列来协调服务之间的操作和状态信息。消息队列服务通
常在控制器节点上运行。OpenStack 支持多种消息队列服务，包括 RabbitMQ、 Qpid
和 ZeroMQ。但是，大多数打包 OpenStack 的发行版都支持特定的消息队列服务。本
指南实现了 RabbitMQ 消息队列服务，因为大多数发行版都支持它
安装和配置组件
安装软件包：
apt install rabbitmq-server
添加 openstack 用户：
rabbitmqctl add_user openstack 000000
Creating user "openstack" ...
替换 RABBIT_PASS 为合适的密码。
允许用户的配置、写入和读取访问权限 openstack：
rabbitmqctl set_permissions openstack ".*" ".*" ".*"
执行上一行生产此行Setting permissions for user "openstack" in vhost "/" ...

4、memcached 内存缓存处理
内存缓存
服务的身份服务认证机制使用 Memcached 来缓存令牌。memcached 服务通常在
控制器节点上运行。对于生产部署，我们建议启用防火墙、身份验证和加密的组合
来保护它。

用于 Ubuntu 的 Memcached
服务的身份服务认证机制使用 Memcached 来缓存令牌。memcached 服务通常在
控制器节点上运行。对于生产部署，我们建议启用防火墙、身份验证和加密的组合
来保护它。
安装和配置组件
安装软件包：
对于 Ubuntu 18.04 和更新版本，请使用：
apt install memcached python3-memcache
编辑/etc/memcached.conf 文件35行，并将服务配置为使用控制器节点的管理 IP 地
址。这是为了允许其他节点通过管理网络进行访问修改：
vim /etc/memcached.conf
-l 192.168.100.10
完成安装
重启 Memcached 服务：
service memcached restart

5、etcd 环境部署
OpenStack 服务可能会使用 Etcd，一种分布式可靠的键值存储，用于分布式密
钥锁定、存储配置、跟踪服务实时性和其他场景。
etcd 服务运行在控制器节点上。
安装和配置组件
安装 etcd 软件包：
apt install etcd
编 辑 该 vim /etc/default/etcd 文 件 ， 将 ETCD_INITIAL_CLUSTER,
ETCD_INITIAL_ADVERTISE_PEER_URLS, ETCD_ADVERTISE_CLIENT_URLS, 设 置 为
ETCD_LISTEN_CLIENT_URLS 控制器节点的管理 IP 地址，以允许其他节点通过管理网
络访问：
在首行或末尾直接添加 其他位置也可以
ETCD_NAME="controller"
ETCD_DATA_DIR="/var/lib/etcd"
ETCD_INITIAL_CLUSTER_STATE="new"
ETCD_INITIAL_CLUSTER_TOKEN="etcd-cluster-01"
ETCD_INITIAL_CLUSTER="controller=http://192.168.100.10:2380"
ETCD_INITIAL_ADVERTISE_PEER_URLS="http://192.168.100.10:2380"
ETCD_ADVERTISE_CLIENT_URLS="http://192.168.100.10:2379"
ETCD_LISTEN_PEER_URLS="http://0.0.0.0:2380"
ETCD_LISTEN_CLIENT_URLS="http://192.168.100.10:2379"
完成安装
启用并重启 etcd 服务：
systemctl enable etcd
systemctl restart etcd




三、安装 OpenStack 服务
OpenStack 系统由几个单独安装的关键服务组成。这些服务根据您的云需求协
同工作，包括计算、身份、网络、镜像、块存储、对象存储、遥测、编排和数据库
服务。您可以单独安装这些项目中的任何一个，并将它们配置为独立的或连接的实
体。
1、Keystone 身份认证服务搭建
本节介绍如何在控制器节点上安装和配置代号为 keystone 的 OpenStack
Identity 服务。出于可扩展性的目的，此配置部署 Fernet 令牌和 Apache HTTP 服
务器来处理请求。
（一）先决条件
在安装和配置身份服务之前，您必须创建一个数据库。
使用数据库访问客户端以 root 用户身份连接数据库服务器：
mysql
创建 keystone 数据库：
CREATE DATABASE keystone;
授予对 keystone 数据库的适当访问权限：（设置 keystone 用户密码为 000000）
GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' \ （先打这一行）
IDENTIFIED BY '000000';（再打这一行）
GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' \ （先打这一行）
IDENTIFIED BY '000000';（再打这一行）
退出数据库访问客户端。
安装和配置组件
本指南使用 Apache HTTP 服务器mod_wsgi在端口 5000 上为 Identity 服务请
求提供服务。默认情况下，keystone 服务仍侦听此端口。该包为您处理所有 Apache
配置（包括 mod_wsgiapache2 模块的激活和 Apache 中的 keystone 配置）。
运行以下命令来安装软件包：
apt install keystone
编辑vim /etc/keystone/keystone.conf 文件并完成以下操作：
在该[database]部分中，配置数据库访问：
[database]599行
# ...
connection = mysql+pymysql://keystone:000000@controller/keystone
在[token]部分中，配置 Fernet 令牌提供程序：
[token]2491行
# ...
provider = fernet
填充身份服务数据库：
# su -s /bin/sh -c "keystone-manage db_sync" keystone
初始化 Fernet 密钥库：
keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
keystone-manage credential_setup --keystone-user keystone --keystone-group keystone

引导身份服务：
在 Queens 发布之前，keystone 需要在两个单独的端口上运行以适应 Identity
v2 API，后者通常在端口 35357 上运行单独的仅管理员服务。随着 v2 API 的删除，
keystone 可以在同一端口上运行所有接口。
# keystone-manage bootstrap --bootstrap-password 000000 \（先打这一行）
--bootstrap-admin-url http://controller:5000/v3/ \                     （再一起复制这4行）
--bootstrap-internal-url http://controller:5000/v3/ \
--bootstrap-public-url http://controller:5000/v3/ \
--bootstrap-region-id RegionOne
配置 Apache HTTP 服务器
编辑vim /etc/apache2/apache2.conf 文件并配置 ServerName 选项以引用控制器节
点：
ServerName controller
如果该 ServerName 条目尚不存在，则需要添加该条目。
SSL
安全部署应将 Web 服务器配置为使用 SSL 或在 SSL 终结器后面运行。
完成安装
重启 Apache 服务：
# service apache2 restart
通过设置适当的环境变量来配置管理帐户：
export OS_USERNAME=admin
export OS_PASSWORD=000000
export OS_PROJECT_NAME=admin
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_DOMAIN_NAME=Default
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3



（二）创建域、项目、用户和角色
Identity 服务为每个 OpenStack 服务提供身份验证服务。身份验证服务使用域、
项目、用户和角色的组合。
尽管本指南中的 keystone-manage 引导步骤中已经存在“默认”域，但创建新
域的正式方法是：
apt  install python3-openstackclient

$ openstack domain create --description "An Example Domain" example
生成
+-------------+----------------------------------+
| Field | Value |
+-------------+----------------------------------+
| description | An Example Domain |
| enabled | True |
| id | 2f4f80574fd84fe6ba9067228ae0a50c |
| name | example |
| tags | [] |
+-------------+----------------------------------+
本指南使用一个服务项目，该项目包含您添加到环境中的每个服务的唯一用户。
创建 service 项目：
$ openstack project create --domain default --description "Service Project" service
生成
+-------------+----------------------------------+
| Field | Value |
+-------------+----------------------------------+
| description | Service Project |
| domain_id | default |
| enabled | True |
| id | 24ac7f19cd944f4cba1d77469b2a73ed |
| is_domain | False |
| name | service |
| parent_id | default |
| tags | [] |
+-------------+----------------------------------+
常规（非管理员）任务应使用非特权项目和用户。
例如，本指南创建 myproject 项目和 myuser 用户。
创建 myproject 项目：
$ openstack project create --domain default \（先打这一行）
--description "Demo Project" myproject （再打这一行）
生成
+-------------+----------------------------------+
| Field | Value |
+-------------+----------------------------------+
| description | Demo Project |
| domain_id | default |
| enabled | True |
| id | 231ad6e7ebba47d6a1e57e1cc07ae446 |
| is_domain | False |
| name | myproject |
| parent_id | default |
| tags | [] |
+-------------+----------------------------------+
创建 myuser 用户：（用户密码设置为 000000）
$ openstack user create --domain default --password-prompt myuser
生成
User Password:打000000
Repeat User Password:打000000
生成
+---------------------+----------------------------------+
| Field | Value |
+---------------------+----------------------------------+
| domain_id | default |
| enabled | True |
| id | aeda23aa78f44e859900e22c24817832 |
| name | myuser |
| options | {} |
| password_expires_at | None |
+---------------------+----------------------------------+
创建 myrole 角色：
$ openstack role create myrole
生成
+-----------+----------------------------------+
| Field | Value |
+-----------+----------------------------------+
| domain_id | None |
| id | 997ce8d05fc143ac97d83fdfb5998552 |
| name | myrole |
+-----------+----------------------------------+
将 myrole 角色添加到 myproject 项目和 myuser 用户：
$ openstack role add --project myproject --user myuser myrole
此命令不提供任何输出。
#unset OS_AUTH_URL OS_PASSWORD
#openstack --os-auth-url http://controller:5000/v3 \
--os-project-domain-name Default --os-user-domain-name Default \
--os-project-name admin --os-username admin token issue
Password:
生成
+------------+----------------------------------------------------------
-------+
| Field | Value
|
+------------+----------------------------------------------------------
-------+
| expires | 2016-02-12T20:14:07.056119Z
|
| id |
gAAAAABWvi7_B8kKQD9wdXac8MoZiQldmjEO643d-e_j-XXq9AmIegIbA7UHGPv |
| |
atnN21qtOMjCFWX7BReJEQnVOAj3nclRQgAYRsfSU_MrsuWb4EDtnjU7HEpoBb4 |
| | o6ozsA_NmFWEpLeKy0uNn_WeKbAhYygrsmQGA49dclHVnz-OMVLiyM9ws
|
| project_id | 343d245e850143a096806dfaefa9afdc
|
| user_id | ac3377633149401296f6c0d92d79dc16
|
+------------+----------------------------------------------------------
-------+
#openstack --os-auth-url http://controller:5000/v3 \
--os-project-domain-name Default --os-user-domain-name Default \
--os-project-name myproject --os-username myuser token issue
Password:
+------------+----------------------------------------------------------
-------+
| Field | Value
|
+------------+----------------------------------------------------------
-------+
| expires | 2016-02-12T20:15:39.014479Z
|
| id |
gAAAAABWvi9bsh7vkiby5BpCCnc-JkbGhm9wH3fabS_cY7uabOubesi-Me6IGWW |
| |
yQqNegDDZ5jw7grI26vvgy1J5nCVwZ_zFRqPiz_qhbq29mgbQLglbkq6FQvzBRQ |
| | JcOzq3uwhzNxszJWmzGC7rJE_H0A_a3UFhqv8M4zMRYSbS2YF0MyFmp_U



2、创建 OpenStack 客户端环境脚本
前面的部分使用环境变量和命令选项的组合通过 openstack 客户端与身份服务
进行交互 。为了提高客户端操作的效率，OpenStack 支持简单的客户端环境脚本，
也称为 OpenRC 文件。这些脚本通常包含所有客户端的通用选项，但也支持独特的
选项。
创建脚本
创建客户端环境的脚本 admin 和 demo 项目和用户。本指南的后续部分将参考这
些脚本来加载客户端操作的适当凭据
创建并编辑 vim admin-openrc 文件并添加以下内容：
export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=admin
export OS_USERNAME=admin
export OS_PASSWORD=000000
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2
创建并编辑 vim demo-openrc 文件并添加以下内容：
export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=myproject
export OS_USERNAME=myuser
export OS_PASSWORD=000000
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2
使用脚本
要将客户端作为特定项目和用户运行，您只需在运行它们之前加载关联的客户
端环境脚本。
例如：加载 admin-openrc 文件以使用身份服务的位置以及 admin 项目和用户凭
据填充环境变量：
$ . admin-openrc
请求身份验证令牌：
$ openstack token issue
+------------+----------------------------------------------------------
-------+
| Field | Value
|
+------------+----------------------------------------------------------
-------+
| expires | 2016-02-12T20:44:35.659723Z
|
| id |
gAAAAABWvjYj-Zjfg8WXFaQnUd1DMYTBVrKw4h3fIagi5NoEmh21U72SrRv2trl |
| |
JWFYhLi2_uPR31Igf6A8mH2Rw9kv_bxNo1jbLNPLGzW_u5FC7InFqx0yYtTwa1e |
| | eq2b0f6-18KZyQhs7F3teAta143kJEWuNEYET-y7u29y0be1_64KYkM7E
|
| project_id | 343d245e850143a096806dfaefa9afdc
|
| user_id | ac3377633149401296f6c0d92d79dc16
|
+------------+----------------------------------------------------------
-------+

3、Glance 镜像服务搭建
安装和配置 (Ubuntu)
本节介绍如何在控制器节点上安装和配置代号为 glance 的 Image 服务。为简单
起见，此配置将镜像存储在本地文件系统上。
先决条件
在安装和配置 Image 服务之前，您必须创建数据库、服务凭证和 API 端点。
要创建数据库，请完成以下步骤：
使用数据库访问客户端以 root 用户身份连接数据库服务器：
# mysql
创建 glance 数据库：
MariaDB [(none)]> CREATE DATABASE glance;
授予对 glance 数据库的适当访问权限：
MariaDB [(none)]> GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' \
IDENTIFIED BY '000000';
MariaDB [(none)]> GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' \
IDENTIFIED BY '000000';

退出数据库访问客户端。
来源 admin 凭据来访问仅管理员 CLI 命令：
$ . admin-openrc
要创建服务凭证，请完成以下步骤：
创建 glance 用户：（设置密码为 000000）
$ openstack user create --domain default --password-prompt glance
User Password:
Repeat User Password:
+---------------------+----------------------------------+
| Field | Value |
+---------------------+----------------------------------+
| domain_id | default |
| enabled | True |
| id | 3f4e777c4062483ab8d9edd7dff829df |
| name | glance |
| options | {} |
| password_expires_at | None |
+---------------------+----------------------------------+
将 admin 角色添加到 glance 用户和 service 项目：
$ openstack role add --project service --user glance admin
此命令不提供任何输出。
创建 glance 服务实体：
$ openstack service create --name glance --description "OpenStack Image" image
+-------------+----------------------------------+
| Field | Value |
+-------------+----------------------------------+
| description | OpenStack Image |
| enabled | True |
| id | 8c2c7f1b9b5049ea9e63757b5533e6d2 |
| name | glance |
| type | image |
+-------------+----------------------------------+
创建镜像服务 API 端点：
$ openstack endpoint create --region RegionOne image public http://controller:9292
+--------------+----------------------------------+
| Field | Value |
+--------------+----------------------------------+
| enabled | True |
| id | 340be3625e9b4239a6415d034e98aace |
| interface | public |
| region | RegionOne
| region_id | RegionOne |
| service_id | 8c2c7f1b9b5049ea9e63757b5533e6d2 |
| service_name | glance |
| service_type | image |
| url | http://controller:9292 |
+--------------+----------------------------------+
$ openstack endpoint create --region RegionOne image internal
http://controller:9292
+--------------+----------------------------------+
| Field | Value |
+--------------+----------------------------------+
| enabled | True |
| id | a6e4b153c2ae4c919eccfdbb7dceb5d2 |
| interface | internal |
| region | RegionOne |
| region_id | RegionOne |
| service_id | 8c2c7f1b9b5049ea9e63757b5533e6d2 |
| service_name | glance |
| service_type | image |
| url | http://controller:9292 |
+--------------+----------------------------------+
$ openstack endpoint create --region RegionOne image admin
http://controller:9292
+--------------+----------------------------------+
| Field | Value |
+--------------+----------------------------------+
| enabled | True |
| id | 0c37ed58103f4300a84ff125a539032d |
| interface | admin |
| region | RegionOne |
| region_id | RegionOne |
| service_id | 8c2c7f1b9b5049ea9e63757b5533e6d2 |
| service_name | glance |
| service_type | image |
| url | http://controller:9292 |
+--------------+----------------------------------+
安装和配置组件
安装软件包：
# apt install glance
编辑vim /etc/glance/glance-api.conf 文件并完成以下操作：
在该[database]部分中，配置数据库访问：
[database]1592
# ...
connection = mysql+pymysql://glance:000000@controller/glance
替换 GLANCE_DBPASS 为您为影像服务数据库选择的密码。
在[keystone_authtoken]和[paste_deploy]部分，配置身份服务访问：
[keystone_authtoken]4659
# ...
www_authenticate_uri = http://controller:5000
auth_url = http://controller:5000
memcached_servers = controller:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = glance
password = 000000
[paste_deploy]5323
# ...
flavor = keystone
在该[glance_store]部分中，配置本地文件系统存储和镜像文件的位置：
[glance_store]2989
# ...
stores = file,http
default_store = file
filesystem_store_datadir = /var/lib/glance/images/
填充影像服务数据库：
# su -s /bin/sh -c "glance-manage db_sync" glance
完成安装
重新启动镜像服务：
# service glance-api restart
使用 QCOW2 磁盘格式、裸容器格式和公开可见性将镜像上传到 Image 服务 ，以
便所有项目都可以访问它：
wget http://download.cirros-cloud.net/0.4.0/cirros-0.4.0-x86_64-disk.img
glance image-create --name cirros  --disk-format  qcow2 --container-format bare  --public < cirros-0.4.0-x86_64-disk.img
glance image-create --name cirros  --disk-format  qcow2 --container-format bare  --progress < cirros-0.4.0-x86_64-disk.img
$ 不用glance image-create --name "cirros" --file cirros-0.4.0-x86_64-disk.img
--disk-format qcow2 --container-format bare --visibility=public
+------------------+----------------------------------------------------
--+
| Field | Value |
+------------------+----------------------------------------------------
--+
| checksum | 133eae9fb1c98f45894a4e60d8736619 |
| container_format | bare |
| created_at | 2015-03-26T16:52:10Z |
| disk_format | qcow2 |
 file | /v2/images/cc5c6982-4910-471e-b864-1098015901b5/file |
| id | cc5c6982-4910-471e-b864-1098015901b5 |
| min_disk | 0 |
| min_ram | 0 |
| name | cirros |
| owner | ae7a98326b9c455588edd2656d723b9d |
| protected | False |
| schema | /v2/schemas/image |
| size | 13200896 |
| status | active |
| tags | |
| updated_at | 2015-03-26T16:52:10Z |
| virtual_size | None |
| visibility | public |
+------------------+----------------------------------------------------
--+
OpenStack 动态生成 ID，因此您将在示例命令输出中看到不同的值。
确认上传镜像并验证属性：
$ glance image-list
+--------------------------------------+--------+--------+
| ID | Name | Status |
+--------------------------------------+--------+--------+
| 38047887-61a7-41ea-9b49-27987d5e8bb9 | cirros | active |
+--------------------------------------+--------+--------+

33mini
4、Placement 环境搭建